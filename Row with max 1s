Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).



def rowWithMax1s(arr, N, M):
    max_row = -1  # Initialize the row with the maximum 1's to -1
    max_count = 0  # Initialize the maximum count of 1's to 0

    for i in range(N):
        count = 0
        j = M - 1  # Start from the last column

        # Count the number of 1's in the current row
        while j >= 0 and arr[i][j] == 1:
            count += 1
            j -= 1

        # Update max_row if the current row has more 1's
        if count > max_count:
            max_count = count
            max_row = i

    return max_row

# Example usage
N = 4
M = 4
Arr = [
    [0, 1, 1, 1],
    [0, 0, 1, 1],
    [1, 1, 1, 1],
    [0, 0, 0, 0]
]

result = rowWithMax1s(Arr, N, M)
print(result)  # Output: 2
